{"version":3,"sources":["pokeball-icon.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","React","Component","Header","Game","state","score","pokemon","selectedPokemon","getPokemon","a","Pokedex","require","P","pokeNumArr","randNumGen","pokeArr","num","resource","pokeHolder","push","setState","Math","floor","random","nums","prevNums","length","currNum","ceil","includes","componentDidMount","handleClick","e","target","firstChild","src","sprites","front_default","console","log","setTimeout","this","selected","PokemonArea","props","map","poke","key","id","onClick","alt","GameInfo","PokemonName","style","textAlign","name","PokeballSpinner","pokeballicon","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,2C,yRCKrCC,G,6LAGF,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUC,IAAMC,YAYlBC,EAAS,WACb,OACE,4BAAQH,UAAU,eAChB,iDAKAI,E,2MACJC,MAAQ,CACNC,MAAO,EACPC,QAAS,GACTC,gBAAiB,I,EAGnBC,W,sBAAa,gDAAAC,EAAA,sDACLC,EAAUC,EAAQ,IAClBC,EAAI,IAAIF,EAAQA,QAChBG,EAAa,EAAKC,aAClBC,EAAU,GAJL,8BAKKF,EALL,yEAKFG,EALE,kBAMgBJ,EAAEK,SAAF,0BAA8BD,EAA9B,MANhB,QAMHE,EANG,OAOTH,EAAQI,KAAKD,GAPJ,6QAUX,EAAKE,SAAS,CACZd,QAASS,EACTR,gBAAiBQ,EAAQM,KAAKC,MAAsB,EAAhBD,KAAKE,aAZhC,4E,EAgBbT,WAAa,WAIX,IAHA,IAAMU,EAAO,GAEPC,EAAW,GACVD,EAAKE,OAAS,GAAG,CACtB,IAAIC,EAAUN,KAAKO,KAAqB,IAAhBP,KAAKE,UACxBE,EAASI,SAASF,KACrBH,EAAKL,KAAKQ,GACVF,EAASN,KAAKQ,IAGlB,OAAOH,G,EAGTM,kBAAoB,WAClB,EAAKtB,c,EAGPuB,YAAc,SAACC,GACTA,EAAEC,OAAOC,WAAWC,MAAQ,EAAK/B,MAAMG,gBAAgB6B,QAAQC,eACjEC,QAAQC,IAAI,WACZ,EAAKnB,SAAS,CAACf,MAAO,EAAKD,MAAMC,MAAQ,KAEzCiC,QAAQC,IAAI,aAEdC,WAAW,EAAKhC,WAAY,M,wEAI5B,OACE,yBAAKT,UAAU,aACb,kBAAC,EAAD,CAAUM,MAAOoC,KAAKrC,MAAMC,QAC5B,kBAAC,EAAD,CACAC,QAASmC,KAAKrC,MAAME,QACpBoC,SAAUD,KAAKrC,MAAMG,gBACrBwB,YAAaU,KAAKV,mB,GA1DP/B,IAAMC,WAiEnB0C,EAAc,SAACC,GACnB,IAAMtC,EAAUsC,EAAMtC,QAAQuC,KAAI,SAAAC,GAChC,OACE,yBACE/C,UAAU,oBACVgD,IAAG,kBAAaD,EAAKE,IACrBC,QAASL,EAAMb,aACf,yBACEhC,UAAU,UACVoC,IAAKW,EAAKV,QAAQC,cAClBa,IAAI,SAMZ,OACE,6BACG5C,EAAQoB,OAAS,EAChB,6BACA,kBAAC,EAAD,CAAagB,SAAUE,EAAMF,WAC7B,yBAAK3C,UAAU,OACZO,IAIH,kBAAC,EAAD,QAMF6C,EAAW,SAACP,GAChB,OACE,4BAAKA,EAAMvC,QAIT+C,EAAc,SAACR,GACnB,OACE,wBAAI7C,UAAU,qBAAqBsD,MAAO,CAACC,UAAW,WAAYV,EAAMF,SAASa,OAI/EC,EAAkB,WACtB,OACE,yBAAKzD,UAAU,eACb,yBAAKA,UAAU,iBAAiBoC,IAAKsB,IAAcP,IAAI,kBACvD,2BAAG,uBAAGQ,KAAK,iCAAR,uBAKM5D,ICnIK6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ab08c5fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball-icon.67d3cdb8.svg\";","import React from 'react';\nimport pokeballicon from './pokeball-icon.svg';\nimport './App.css';\nimport { get } from 'https';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Game />\n      </div>\n    );\n  }\n}\n\nconst Header = () => {\n  return (\n    <header className=\"text-center\">\n      <h1>Pokemon Guesser</h1>\n    </header>\n  );\n}\n\nclass Game extends React.Component {\n  state = {\n    score: 0,\n    pokemon: [],\n    selectedPokemon: {}\n  }\n  \n  getPokemon = async () => {\n    const Pokedex = require('pokeapi-js-wrapper');\n    const P = new Pokedex.Pokedex();\n    const pokeNumArr = this.randNumGen();\n    const pokeArr = [];\n    for (let num of pokeNumArr) {\n      const pokeHolder = await P.resource(`/api/v2/pokemon/${num}/`);\n      pokeArr.push(pokeHolder);\n    }\n  \n    this.setState({ \n      pokemon: pokeArr,\n      selectedPokemon: pokeArr[Math.floor(Math.random() * 4)]\n    });\n  };\n\n  randNumGen = () => {\n    const nums = [];\n  \n    const prevNums = [];\n    while (nums.length < 4) {\n      let currNum = Math.ceil(Math.random() * 151);\n      if (!prevNums.includes(currNum)) {\n        nums.push(currNum);\n        prevNums.push(currNum);\n      }\n    }\n    return nums;\n  }\n\n  componentDidMount = () => {\n    this.getPokemon();\n  }\n\n  handleClick = (e) => {\n    if (e.target.firstChild.src === this.state.selectedPokemon.sprites.front_default) {\n      console.log('correct');\n      this.setState({score: this.state.score + 1});\n    } else {\n      console.log('incorrect');\n    }\n    setTimeout(this.getPokemon, 100);\n  }\n  \n  render() {\n    return (\n      <div className=\"container\">\n        <GameInfo score={this.state.score}/>\n        <PokemonArea \n        pokemon={this.state.pokemon} \n        selected={this.state.selectedPokemon}\n        handleClick={this.handleClick}\n      />\n      </div>\n    );\n  }\n}\n\nconst PokemonArea = (props) => {\n  const pokemon = props.pokemon.map(poke => {\n    return (\n      <div \n        className=\"p-image-card my-3\" \n        key={`pokemon-${poke.id}`}\n        onClick={props.handleClick} >\n        <img\n          className=\"p-image\"\n          src={poke.sprites.front_default}\n          alt=\"\"\n        />\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      {pokemon.length > 0 ? (\n        <div>\n        <PokemonName selected={props.selected} />\n        <div className=\"row\">\n          {pokemon}\n        </div>\n        </div>\n      ) : (\n        <PokeballSpinner />\n      )}\n    </div>\n  );\n}\n\nconst GameInfo = (props) => {\n  return (\n    <h1>{props.score}</h1>\n  )\n}\n\nconst PokemonName = (props) => {\n  return (\n    <h2 className=\"selected-poke-name\" style={{textAlign: 'center'}}>{props.selected.name}</h2>\n  )\n}\n\nconst PokeballSpinner = () => {\n  return (\n    <div className=\"text-center\">\n      <img className=\"block App-logo\" src={pokeballicon} alt=\"pokeball-icon\" />\n      <p><a href=\"http://www.onlinewebfonts.com\">oNline Web Fonts</a></p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}