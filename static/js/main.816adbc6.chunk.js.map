{"version":3,"sources":["pokeball-icon.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Game","useState","score","setScore","pokemon","setPokemon","selectedPokemon","setSelectedPokemon","useEffect","getPokemon","a","Pokedex","require","P","pokeNumArr","randNumGen","pokeArr","num","resource","pokemonData","push","Math","floor","random","nums","length","currNum","ceil","includes","selected","handleClick","e","target","firstChild","src","sprites","front_default","PokemonArea","props","map","poke","key","id","onClick","alt","GameInfo","PokemonName","style","textAlign","name","PokeballSpinner","pokeballicon","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,2C,kNCarCC,G,MAAS,WACb,OACE,4BAAQC,UAAU,eAChB,kDAKAC,EAAO,WAAO,IAAD,EACSC,mBAAS,GADlB,mBACVC,EADU,KACHC,EADG,OAEaF,mBAAS,IAFtB,mBAEVG,EAFU,KAEDC,EAFC,OAG6BJ,mBAAS,IAHtC,mBAGVK,EAHU,KAGOC,EAHP,KAMjBC,qBAAU,WACRC,MACC,CAACP,IAEJ,IAAMO,EAAU,uCAAG,gDAAAC,EAAA,sDACXC,EAAUC,EAAQ,IAClBC,EAAI,IAAIF,EAAQA,QAChBG,EAAaC,IACbC,EAAU,GAJC,8BAKDF,EALC,yEAKRG,EALQ,kBAMWJ,EAAEK,SAAF,0BAA8BD,EAA9B,MANX,QAMTE,EANS,OAOfH,EAAQI,KAAKD,GAPE,6QAUjBd,EAAWW,GAEXT,EAAmBS,EAAQK,KAAKC,MAAsB,EAAhBD,KAAKE,YAZ1B,4EAAH,qDAeVR,EAAa,WAEjB,IADA,IAAMS,EAAO,GACNA,EAAKC,OAAS,GAAG,CACtB,IAAIC,EAAUL,KAAKM,KAAqB,IAAhBN,KAAKE,UAExBC,EAAKI,SAASF,IACjBF,EAAKJ,KAAKM,GAGd,OAAOF,GAcT,OACE,yBAAKzB,UAAU,aACb,kBAAC,EAAD,CAAUG,MAAOA,IACjB,kBAAC,EAAD,CACEE,QAASA,EACTyB,SAAUvB,EACVwB,YAjBc,SAAAC,GACdA,EAAEC,OAAOC,WAAWC,MAAQ5B,EAAgB6B,QAAQC,gBAEtDjC,EAASD,EAAQ,GACjBG,EAAW,IACXE,EAAmB,UAkBnB8B,EAAc,SAAAC,GAClB,IAAMlC,EAAUkC,EAAMlC,QAAQmC,KAAI,SAAAC,GAChC,OACE,yBAAKzC,UAAU,uBACb,yBACEA,UAAU,eACV0C,IAAG,kBAAaD,EAAKE,IACrBC,QAASL,EAAMR,aAEf,yBAAK/B,UAAU,UAAUmC,IAAKM,EAAKL,QAAQC,cAAeQ,IAAI,UAMtE,OACE,6BACGxC,EAAQqB,OAAS,EAChB,6BACE,kBAAC,EAAD,CAAaI,SAAUS,EAAMT,WAC7B,yBAAK9B,UAAU,OAAOK,IAGxB,kBAAC,EAAD,QAMFyC,EAAW,SAAAP,GACf,OAAO,4BAAKA,EAAMpC,QAGd4C,EAAc,SAAAR,GAClB,OACE,wBAAIvC,UAAU,qBAAqBgD,MAAO,CAAEC,UAAW,WACpDV,EAAMT,SAASoB,OAKhBC,EAAkB,WACtB,OACE,yBAAKnD,UAAU,eACb,yBAAKA,UAAU,iBAAiBmC,IAAKiB,IAAcP,IAAI,kBACvD,2BACE,uBAAGQ,KAAK,iCAAR,uBAMOC,EAjIH,WACV,OACE,yBAAKtD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.816adbc6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball-icon.22768e36.svg\";","import React, { useState, useEffect } from \"react\";\nimport pokeballicon from \"./pokeball-icon.svg\";\nimport \"./App.scss\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Game />\n    </div>\n  );\n};\n\nconst Header = () => {\n  return (\n    <header className=\"text-center\">\n      <h1>Pokemon Guesser</h1>\n    </header>\n  );\n};\n\nconst Game = () => {\n  const [score, setScore] = useState(0);\n  const [pokemon, setPokemon] = useState([]);\n  const [selectedPokemon, setSelectedPokemon] = useState({});\n  // const [gameState, setGameState] = useState(0);\n\n  useEffect(() => {\n    getPokemon();\n  }, [score]);\n\n  const getPokemon = async () => {\n    const Pokedex = require(\"pokeapi-js-wrapper\");\n    const P = new Pokedex.Pokedex();\n    const pokeNumArr = randNumGen();\n    const pokeArr = [];\n    for (let num of pokeNumArr) {\n      const pokemonData = await P.resource(`/api/v2/pokemon/${num}/`);\n      pokeArr.push(pokemonData);\n    }\n\n    setPokemon(pokeArr);\n    // select a random pokemon from the 4 obtained\n    setSelectedPokemon(pokeArr[Math.floor(Math.random() * 4)]);\n  };\n\n  const randNumGen = () => {\n    const nums = [];\n    while (nums.length < 4) {\n      let currNum = Math.ceil(Math.random() * 151);\n      // if the number is not already in the array\n      if (!nums.includes(currNum)) {\n        nums.push(currNum);\n      }\n    }\n    return nums;\n  };\n\n  const handleClick = e => {\n    if (e.target.firstChild.src === selectedPokemon.sprites.front_default) {\n      // show correct\n      setScore(score + 1);\n      setPokemon([]);\n      setSelectedPokemon({});\n    } else {\n      // show incorrect \n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <GameInfo score={score} />\n      <PokemonArea\n        pokemon={pokemon}\n        selected={selectedPokemon}\n        handleClick={handleClick}\n      />\n    </div>\n  );\n};\n\nconst PokemonArea = props => {\n  const pokemon = props.pokemon.map(poke => {\n    return (\n      <div className=\"col-6 col-md-3 my-3\">\n        <div\n          className=\"p-image-card\"\n          key={`pokemon-${poke.id}`}\n          onClick={props.handleClick}\n        >\n          <img className=\"p-image\" src={poke.sprites.front_default} alt=\"\" />\n        </div>\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      {pokemon.length > 0 ? (\n        <div>\n          <PokemonName selected={props.selected} />\n          <div className=\"row\">{pokemon}</div>\n        </div>\n      ) : (\n        <PokeballSpinner />\n      )}\n    </div>\n  );\n};\n\nconst GameInfo = props => {\n  return <h1>{props.score}</h1>;\n};\n\nconst PokemonName = props => {\n  return (\n    <h2 className=\"selected-poke-name\" style={{ textAlign: \"center\" }}>\n      {props.selected.name}\n    </h2>\n  );\n};\n\nconst PokeballSpinner = () => {\n  return (\n    <div className=\"text-center\">\n      <img className=\"block App-logo\" src={pokeballicon} alt=\"pokeball-icon\" />\n      <p>\n        <a href=\"http://www.onlinewebfonts.com\">oNline Web Fonts</a>\n      </p>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}